unit uFreqBand;

interface
uses
  ubtnlistview, classes, stdctrls, controls, ExtCtrls, ComCtrls, uchartevents,
  uBaseObj, utrend, ucommonmath, uCommonTypes, sysutils, uDrawObj, opengl,  uaxis,
  uFrameListener, messages, windows, uCursors, ulogFile, uLabel, uPage,
  uSimpleObjects,
  uBasicTrend,
  mathfunction
  ;

type
  cTrendPair = class
  public
    tr:cbasictrend;
    l:clabel;
  public
    destructor destroy;
  end;

  cFreqBand = class(cdrawobj)
  public
    // подпись линии
    m_LineLabel:cLabel;
    // дефйолтная позиция метки без пользовательского смещения
    m_Linedefpos:point2;
    // хранит cTrendPair
    m_trendLabels:tlist;
  protected
    m_LineColor:point3;
    m_drawline:boolean;
    // Граница слева (отступ в координатах +-1)
    m_x1:double;
    // Граница справа (отступ в координатах +-1)
    m_x2:double;
    // центральная частота в координатах +-1
    m_x:double;
  public
    // влияет только на подпись. Пока реализация размещения в координатах
    // отрисовки на совести пользователя (см. uSpmChart как пример)
    m_realX:double;
  protected
    procedure cleartrendlabels;
    // происходит при назначении нового родителя
    procedure DoLincParent; override;
    procedure drawdata;override;
    procedure setx(v:double);
    procedure setx1(v:double);
    procedure setx2(v:double);
    procedure setdrawline(v:boolean);
    // вызывается с пмоощью механизма event-ов при обновлении страницы
    procedure doUpdatePageSize(sender:tobject);
    procedure DeleteEvents;Override;
    procedure CreateEvents;override;
    procedure setname(s:string);override;
    function getLineText:string;
    procedure setLineText(s:string);
  public
    procedure inittrendlabels;
    constructor create;override;
    destructor destroy;override;
    property linetext:string read getLineText write setLineText;
    property x:double read m_x write setx;
    property x1:double read m_x1 write setx1;
    property x2:double read m_x2 write setx2;
    property drawline:boolean read m_drawline write setdrawline;
    //destructor destroy;override;
    //procedure drawdata;override;
  end;

implementation


function correctPosX(page: cpage; x: double; var error:boolean): double;
var
  min, max: double;
begin
  error:=false;
  if page.lgX then
  begin
    min:=page.MinX;
    max:=page.MaxX;
    if (min < x) and (x < max) then
    begin
      result := LogValToLinearScale(x, p2d(min, max));
    end
    else
      error:=true;
  end
  else
  begin
    result := x;
  end;
end;

function correctPosY(aX: caxis; page: cpage; p: point2d): double;
var
  y: double;
begin
  if aX.lg then
  begin
    if (aX.min.y < p.y) and (p.y < aX.max.y) then
    begin
      y := LogValToLinearScale(p.y, p2d(aX.min.y, aX.max.y));
    end;
  end
  else
  begin
    y := p.y;
  end;
  result:=y;
end;

function correctPos(aX: caxis; page: cpage; p: point2d): point2d;
var
  x, y: double;
begin
  if page.lgX then
  begin
    if (aX.min.x < p.x) and (p.x < aX.max.x) then
    begin
      x := LogValToLinearScale(p.x, p2d(aX.min.x, aX.max.x));
    end;
  end
  else
  begin
    x := p.x;
  end;
  if aX.lg then
  begin
    if (aX.min.y < p.y) and (p.y < aX.max.y) then
    begin
      y := LogValToLinearScale(p.y, p2d(aX.min.y, aX.max.y));
    end;
  end
  else
  begin
    y := p.y;
  end;
  result := p2d(x, y);
end;

{ cFreqBand }

procedure cFreqBand.cleartrendlabels;
var
  I: Integer;
  p:cTrendPair;
begin
  for I := 0 to m_trendLabels.Count - 1 do
  begin
    p:=ctrendpair(m_trendLabels.Items[i]);
    p.destroy;
  end;
  m_trendLabels.Clear;
end;

constructor cFreqBand.create;
begin
  inherited;
  m_trendLabels:=tlist.create;

  fhelper:=false;
  autocreate:=true;
  m_drawline:=true;
  color:=Brightgray;
  m_linecolor:=red;
  m_x1:=0.1;
  m_x2:=0.1;

  m_LineLabel:=clabel.create;
  m_LineLabel.m_drawobjvp:=true;
  m_LineLabel.enabled:=true;
  m_LineLabel.flocked:=false;
  m_LineLabel.fHelper:=false;
  m_LineLabel.autocreate:=true;
  m_LineLabel.Transparent:=false;
  //AddChild(m_LineLabel);
end;


procedure cFreqBand.DoLincParent;
var
  page: cpage;
  rect: TRect;
  index:integer;
begin
  inherited;
  page := cpage(getpage);
  if page<>nil then
  begin
    page.addchild(m_LineLabel);
    m_LineLabel.Text:=m_LineLabel.Text;
    m_LineLabel.Position:=p2(0, page.m_TabSpace.BottomLeft.y+m_LineLabel.GetTextHeigth);
    m_Linedefpos:=m_LineLabel.Position;
  end;
end;

procedure cFreqBand.drawdata;
var
  page: cpage;
begin
  inherited;
  page := cpage(getpage);
  page.setDrawObjVP;
  drawrect(boundrect, color);
  if drawline then
  begin
    glColor3fv(@m_LineColor);
    //uSimpleObjects.DrawLine(p2(m_x,boundrect.BottomLeft.y), p2(m_x,boundrect.TopRight.y));
    uSimpleObjects.DrawLine(p2(m_x,-1), p2(m_x,1));
  end;
end;


procedure cFreqBand.setdrawline(v: boolean);
begin
  EnterCS;
  m_drawline:=v;
  exitcs;
end;

function cFreqBand.getLineText: string;
begin
  result:=m_LineLabel.text;
end;

procedure cFreqBand.inittrendlabels;
var
  o:cdrawobj;
  t:cbasictrend;
  l:clabel;
  p:cpage;
  a:caxis;
  I, j: Integer;
  pair:cTrendPair;
begin
  cleartrendlabels;
  p := cpage(getpage);
  for I := 0 to p.getAxisCount - 1 do
  begin
    a:=p.getaxis(i);
    for j := 0 to a.ChildCount - 1 do
    begin
      o:=cdrawobj(a.getChild(j));
      if o is cbasictrend then
      begin
        t:=cbasictrend(o);
        l:=clabel.create;
        l.fHelper:=true;
        l.name:=t.name+'_Label';
        pair:=cTrendPair.Create;
        pair.tr:=t;
        pair.l:=l;
        m_trendLabels.Add(pair);
      end;
    end;
  end;
end;

procedure cFreqBand.setLineText(s: string);
begin
  m_LineLabel.text:=s;
end;

procedure cFreqBand.setname(s: string);
begin
  inherited;
  //m_LineLabel.Text:=s+char(10)+format(' X:%.3g', [m_realX]);
  //m_LineLabel.Text:=s+char(10)+'X: '+formatstrNoE(m_realX, 3);
  m_LineLabel.Text:=s+char(10)+'X/Y: '+inttostr(m_LineLabel.m_userOffset.x)+'/'
                                      +inttostr(m_LineLabel.m_userOffset.y);
end;

procedure cFreqBand.setx(v: double);
var
  p:cpage;
  lp2:point2;
  offset:double;
begin
  EnterCS;
  m_x:=v;
  boundrect.BottomLeft.x:=m_x-m_x1;
  boundrect.TopRight.x:=m_x+m_x2;
  p:=cpage(getpage);
  if p<>nil then
  begin
    lp2:=p.p2iTop2(m_LineLabel.m_userOffset);
    lp2.x:=lp2.x+1;
    lp2.y:=lp2.y+1;
  end;
  //m_LineLabel.Position:=p2(m_x+lp2.x,m_LineLabel.Position.y+lp2.y);
  m_LineLabel.Position:=p2(m_x+lp2.x,m_Linedefpos.y+lp2.y);
  m_Linedefpos.x:=m_x;
  //m_LineLabel.Position:=p2(m_x,m_LineLabel.Position.y);
  exitcs;
end;

procedure cFreqBand.setx1(v:double);
begin
  EnterCS;
  m_x1:=v;
  boundrect.BottomLeft.x:=m_x-m_x1;
  exitcs;
end;

procedure cFreqBand.setx2(v:double);
begin
  EnterCS;
  m_x2:=v;
  boundrect.TopRight.x:=m_x+m_x2;
  exitcs;
end;

procedure cFreqBand.doUpdatePageSize(sender:tobject);
var
  page:cpage;
begin
  page := cpage(getpage);
  //boundrect.BottomLeft.y:=page.m_TabSpace.BottomLeft.y;
  //boundrect.TopRight.y:=page.m_TabSpace.TopRight.y;
  boundrect.BottomLeft.y:=-1;
  boundrect.TopRight.y:=1;
end;

procedure cFreqBand.CreateEvents;
begin
  //events.AddEvent('trendAddpoint', e_onAddpoint, doaddpoint);
  events.AddEvent(name+'_OnPageSizeFreqBand', e_onResize, doUpdatePageSize);
end;

procedure cFreqBand.DeleteEvents;
begin
  inherited;
  events.removeEvent(doUpdatePageSize, e_onResize);
end;

destructor cFreqBand.destroy;
begin
  cleartrendlabels;
  m_trendLabels.destroy;
  inherited;
end;

{ cTrendPair }

destructor cTrendPair.destroy;
begin
  l.destroy;
  inherited;
end;

end.
