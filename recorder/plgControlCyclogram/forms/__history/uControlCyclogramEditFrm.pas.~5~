unit uControlCyclogramEditFrm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, uBtnListView, StdCtrls, ExtCtrls, Buttons,
  uControlEditFrame, uModeFrame, uRecorderEvents, uControlObj,
  uComponentServises,
  pluginClass, ImgList, VirtualTrees, uVTServices, Menus, inifiles, uFilemng,
  uBaseObj, uRCFunc, uRvclService,
  tags, recorder, uBaseObjService, uModesTabsForm, activex, uRTrig,
  DCL_MYOWN, uRcCtrls, uTrigsFrm, uEventTypes
  //, uBaseAlg
  ;

type

  TControlCyclogramEditFrm = class(TForm)
    ImageList_32: TImageList;
    MainMenu1: TMainMenu;
    N1: TMenuItem;
    OpenMenu: TMenuItem;
    SaveMenu: TMenuItem;
    ImageList_16: TImageList;
    SaveDialog1: TSaveDialog;
    FormChannelsGB: TGroupBox;
    CommonPanel: TPanel;
    ActionPanel: TPanel;
    ControlsListPanel: TPanel;
    ControlsGB: TGroupBox;
    ControlsLV: TBtnListView;
    EditcontrolsListPanel: TPanel;
    AddControlBtn: TSpeedButton;
    UpdateBtn: TSpeedButton;
    ModesListPanel: TPanel;
    ModesGB: TGroupBox;
    Panel1: TPanel;
    AddPObjBtn: TSpeedButton;
    ProgramTV: TVTree;
    ControlEditFrame1: TControlEditFrame;
    Splitter2: TSplitter;
    OnTopSplitter: TSplitter;
    ChanNamesPanel: TPanel;
    FilterEdit: TEdit;
    TagsLV: TBtnListView;
    FrmTagPropLabel: TLabel;
    FrmTagPropValueEdit: TEdit;
    FrmTagPropValue: TLabel;
    FrmTagPropNameCB: TComboBox;
    UpdatePObjBtn: TSpeedButton;
    ModeFrame1: TModeFrame;
    StatusBar1: TStatusBar;
    Panel2: TPanel;
    StopTrigGB: TGroupBox;
    StopTrigLvl: TFloatEdit;
    Label2: TLabel;
    StopTrigRG: TRadioGroup;
    StopTrigCB: TRcComboBox;
    ActionsTrigs: TMenuItem;
    ApplyTrigBtn: TButton;
    Label1: TLabel;
    OpenDialog1: TOpenDialog;
    AllowUserModeSelectCB: TCheckBox;
    procedure AddControlBtnClick(Sender: TObject);
    procedure UpdateBtnClick(Sender: TObject);
    procedure ControlsLVSelectItem(Sender: TObject; Item: TListItem;
      Selected: Boolean);
    procedure SaveMenuClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure AddPObjBtnClick(Sender: TObject);
    procedure ProgramTVChange(Sender: TBaseVirtualTree; Node: PVirtualNode);
    procedure UpdatePObjBtnClick(Sender: TObject);
    procedure FilterEditChange(Sender: TObject);
    procedure ProgramTVKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure ControlsLVKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure ModeFrame1ShowModesTabBtnClick(Sender: TObject);
    procedure ControlsLVStartDrag(Sender: TObject; var DragObject: TDragObject);
    procedure ControlsLVEndDrag(Sender, Target: TObject; X, Y: Integer);
    procedure ProgramTVDragOver(Sender: TBaseVirtualTree; Source: TObject;
      Shift: TShiftState; State: TDragState; Pt: TPoint; Mode: TDropMode;
      var Effect: Integer; var Accept: Boolean);
    procedure ProgramTVDragDrop(Sender: TBaseVirtualTree; Source: TObject;
      DataObject: IDataObject; Formats: TFormatArray; Shift: TShiftState;
      Pt: TPoint; var Effect: Integer; Mode: TDropMode);
    procedure ApplyTrigBtnClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure ActionsTrigsClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure OpenMenuClick(Sender: TObject);
    procedure ProgramTVDblClick(Sender: TObject);
  private
    m_conmng: cControlMng;
    m_fileMng: cfilemng;
    m_lastfile: string;
    m_needShowControls: Boolean;

    m_dragControls: Boolean;
  private
    procedure delControl(obj:cbaseobj);
    procedure createEvents;
    procedure destroyEvents;
    procedure ShowStopTrig;
    procedure ShowChannels;
    procedure ShowControls;
    function GetSelectProg: cProgramObj;
    // проверка что свойства формы для создания регулятора корректны
    function CheckControlParams: Boolean;
    procedure ShowProperties;
    procedure EditControlLI(li: TListItem; con: cControlObj);
    // отобразить свойства выбранных в листе регуляторов
    procedure ShowControlProps();
    procedure ShowProgObjProps();

    procedure doPlgEdit(Sender: TObject);
    procedure doUpdateCfg(Sender: TObject);
    procedure save(path: string);
    procedure showprogramInTV;
  public
    procedure load(path: string);
    procedure saveUI;
    procedure LoadUI;
    procedure LinkPlg(p_conmng: cControlMng);
    procedure UnLinkPlg;
    function CreateControl: cControlObj;
  end;

var
  ControlCyclogramEditFrm: TControlCyclogramEditFrm;

procedure ShowProgramsTV(tv: TVTree; mng: cControlMng; image: TImageList);

implementation

{$R *.dfm}
{ TControlCyclogramEditFrm }

procedure ShowProgramsTV(tv: TVTree; mng: cControlMng; image: TImageList);
var
  I: Integer;
begin
  showInVTreeView(tv, mng.programs, image);
end;

procedure TControlCyclogramEditFrm.showprogramInTV;
begin
  ShowProgramsTV(ProgramTV, m_conmng, ImageList_16);
end;

procedure TControlCyclogramEditFrm.ActionsTrigsClick(Sender: TObject);
begin
  TrigsFrm.ShowModal;
end;

procedure TControlCyclogramEditFrm.AddControlBtnClick(Sender: TObject);
var
  con: cControlObj;
  li: TListItem;
begin
  con := CreateControl;
  if con <> nil then
  begin
    li := ControlsLV.Items.Add;
    EditControlLI(li, con);
    LVChange(ControlsLV);
  end;
  g_conmng.configChanged := true;
end;

procedure TControlCyclogramEditFrm.EditControlLI(li: TListItem;
  con: cControlObj);
begin
  li.Data := con;
  li.ImageIndex := con.ImageIndex;
  ControlsLV.SetSubItemByColumnName('№', inttostr(li.index + 1), li);
  ControlsLV.SetSubItemByColumnName('Имя', con.name, li);
  ControlsLV.SetSubItemByColumnName('Тип', con.TypeString, li);
  ControlsLV.SetSubItemByColumnName('Свойства', con.Properties, li);
end;

procedure TControlCyclogramEditFrm.FilterEditChange(Sender: TObject);
begin
  ShowChannels;
end;

procedure TControlCyclogramEditFrm.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  saveUI;
end;

function testDocFileName(str: string): Boolean;
begin
  // Функция, которая проверяет нужно ли отображать считанный из файла пункт в меню
  result := fileexists(extractfiledir(application.ExeName)
      + '\files\Документация\' + str);
end;


procedure TControlCyclogramEditFrm.FormCreate(Sender: TObject);
begin
  m_fileMng := cfilemng.Create(g_startdir + '\ControlCyclogram.ini', MainMenu1,
    'Файл', testDocFileName);
    m_needShowControls:=true;
end;

procedure TControlCyclogramEditFrm.FormDestroy(Sender: TObject);
begin
  m_fileMng.Destroy;
  m_fileMng:=nil;
end;

function TControlCyclogramEditFrm.GetSelectProg: cProgramObj;
var
  n: PVirtualNode;
  d: PNodeData;
  p: cProgramObj;
begin
  result:=nil;
  n := GetSelectNode(ProgramTV);
  if n <> nil then
  begin
    d := ProgramTV.GetNodeData(n);
    p := cProgramObj(d.Data);
    result:=p;
  end;
end;

function TControlCyclogramEditFrm.CheckControlParams: Boolean;
begin
  result := ControlEditFrame1.CheckControlName;
end;

procedure TControlCyclogramEditFrm.ControlsLVEndDrag(Sender, Target: TObject;
  X, Y: Integer);
begin
  m_dragControls := false;
  StatusBar1.Panels[1].text := '';
end;

procedure TControlCyclogramEditFrm.ControlsLVKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
var
  I: Integer;
  li, next: TListItem;
  obj: cbaseobj;
begin
  if Key = VK_DELETE then
  begin
    li:=ControlsLV.Selected;
    while li<>nil do
    begin
      obj:=cbaseobj(li.data);
      next:=ControlsLV.GetNextItem(li,sdAll,[isSelected]);
      delControl(obj);
      li:=next;
    end;
  end;
  ShowControlProps;
end;

procedure TControlCyclogramEditFrm.ControlsLVSelectItem(Sender: TObject;
  Item: TListItem; Selected: Boolean);
var
  con: cControlObj;
  li: TListItem;
begin
  ControlEditFrame1.EndControlsMS;
  ShowControlProps;
  li := ControlsLV.Selected;
  if li <> nil then
  begin
    if ControlsLV.SelCount > 1 then
    begin
      StatusBar1.Panels[1].text := 'Выбрано регуляторов: ' + inttostr
        (ControlsLV.SelCount);
    end
    else
    begin
      con := cControlObj(li.Data);
      StatusBar1.Panels[1].text := 'Выбран регулятор: ' + con.name;
    end;
  end
  else
  begin
    StatusBar1.Panels[1].text := '';
  end;
end;

procedure TControlCyclogramEditFrm.ControlsLVStartDrag(Sender: TObject;
  var DragObject: TDragObject);
begin
  m_dragControls := true;
  StatusBar1.Panels[1].text := 'Перетащите регуляторы на нужную программу';
end;

function TControlCyclogramEditFrm.CreateControl: cControlObj;
begin
  result := ControlEditFrame1.CreateControl(m_conmng);
end;

procedure TControlCyclogramEditFrm.ShowProperties;
begin
  AllowUserModeSelectCB.Checked:=g_conmng.AllowUserModeSelect;

  ShowChannels;
  ShowControls;
  ShowStopTrig;
  showprogramInTV;
  ControlEditFrame1.Show;
  ModeFrame1.Show;
end;

procedure TControlCyclogramEditFrm.ShowStopTrig;
begin
  if g_conmng.StopTrigger<>nil then
  begin
    setComboBoxItem(crtrig(g_conmng.StopTrigger).channame,StopTrigCB);
    StopTrigRG.itemindex:=TrigTypeToInt(crtrig(g_conmng.StopTrigger).Trigtype);
    StopTrigLvl.FloatNum:=crtrig(g_conmng.StopTrigger).Threshold;
  end
  else
  begin
    StopTrigCB.ItemIndex:=-1;
  end;
end;

function getProgramNodeFromChildNode(n:pvirtualnode;tv:tvtree):pvirtualnode;
var
  d:pnodedata;
begin
  result:=nil;
  while (n<>nil) or (n<>tv.RootNode) do
  begin
    d:=tv.GetNodeData(n);
    if d.data<>nil then
    begin
      if tobject(d.data) is cProgramObj then
      begin
        result:=n;
        exit;
      end;
    end;
    n:=n.Parent;
  end;
end;

function getProgramFromChildNode(n:pvirtualnode;tv:tvtree):cProgramObj;
var
  d:pnodedata;
begin
  n:=getProgramNodeFromChildNode(n, tv);
  result:=nil;
  if n<>nil then
  begin
    d:=tv.GetNodeData(n);
    if tobject(d.data) is cProgramObj then
    begin
      result:=cProgramObj(d.data);
      exit;
    end;
  end;
end;

function getSelectModeFromTV(tv:tvtree):cmodeobj;
var
  selectNode:pVirtualNode;
  d:pnodedata;
  p:cprogramobj;
begin
  result:=nil;
  selectNode:=GetSelectNode(tv);
  if selectnode=nil then
  begin
    if g_conmng.ProgramCount > 0 then
    begin
      p := g_conmng.getProgram(0);
      selectNode:=tv.GetNodeByPointer(p);
    end;
  end;
  if selectnode<>nil then
  begin
    d:=tv.GetNodeData(selectnode);
    if d.data<>nil then
    begin
      if tobject(d.data) is cmodeobj then
      begin
        result:=cmodeobj(d.data);
      end;
    end;
  end;
end;

procedure TControlCyclogramEditFrm.AddPObjBtnClick(Sender: TObject);
var
  rootNode, progNode, n, modenode:pVirtualNode;
  root, o: cbaseobj;
  selMode:cmodeobj;
  d:pnodedata;
begin
  root := GetSelectObjectFromVTV(ProgramTV);
  rootNode:=GetSelectNode(ProgramTV);
  if rootNode = nil then
  begin
    if ModeFrame1.PageControl1.ActivePageIndex = 1 then
    begin
      if g_conmng.ProgramCount > 0 then
      begin
        root := g_conmng.getProgram(0);
        rootNode:=ProgramTV.GetNodeByPointer(root);
      end;
    end;
  end;
  o := ModeFrame1.CreateObj;
  if o is cModeObj then
  begin
    if not(root is cProgramObj) then
    begin
      root := getProgramFromChildNode(rootnode, ProgramTV);//root.GetParentByClassName(cProgramObj.ClassName);
    end;
    if root is cProgramObj then
    begin
      progNode:=getProgramNodeFromChildNode(rootnode, ProgramTV);
      selMode:=getSelectModeFromTV(ProgramTV);
      if selmode=nil then
      begin
        cProgramObj(root).addMode(cModeObj(o));
        n:=ProgramTV.AddChild(progNode, nil);
        d:=ProgramTV.GetNodeData(n);
        d.ImageIndex:=cModeObj(o).imageindex;
        d.Caption:=cModeObj(o).caption;
      end
      else
      begin
        cProgramObj(root).insertMode(cModeObj(o),selmode.Mindex+1);
        modenode:=ProgramTV.GetNodeByPointer(selmode);
        //n:=ProgramTV.InsertNode(modenode, amInsertBefore, nil);
        n:=ProgramTV.InsertNode(modenode, amInsertAfter, nil);
        d:=ProgramTV.GetNodeData(n);
        d.ImageIndex:=cModeObj(o).imageindex;
        d.Caption:=cModeObj(o).caption;
      end;
      d.color:=ProgramTV.normalcolor;
      d.data:=o;
      //ShowBaseObjectInVTreeView(ProgramTV,o, progNode);
      //ShowProgramInTV;
    end
    else
    begin
      o.destroy;
      showmessage('для создания режима нужно сначала выбрать программу');
      exit;
    end;
  end;
  if o is cProgramObj then
  begin
    m_conmng.Add(o);
    ShowBaseObjectInVTreeView(ProgramTV,o, nil);
  end;
  //showprogramInTV;
  g_conmng.configChanged := true;
end;

procedure TControlCyclogramEditFrm.ApplyTrigBtnClick(Sender: TObject);
var
  t:crtrig;
begin
  g_conmng.AllowUserModeSelect:=AllowUserModeSelectcb.Checked;
  if g_conmng.StopTrigger<>nil then
  begin

    if StopTrigCB.text<>'' then
    begin
      crTrig(g_conmng.StopTrigger).setchannel(StopTrigCB.text);
    end
    else
    begin
      g_conmng.StopTrigger:=nil;
    end;
  end
  else
  begin
    if StopTrigCB.text<>'' then
    begin
      t:=cRTrig.create(g_conmng);
      crTrig(t).setchannel(StopTrigCB.text);
      g_conmng.StopTrigger:=t;
      t.name:='CommonStopTrig';
      t.Trigtype:=IntToTrigType(StopTrigRG.ItemIndex);
      t.Threshold:=StopTrigLvl.FloatNum;
      g_conmng.addtrig(t);
    end
  end;
end;

procedure TControlCyclogramEditFrm.createEvents;
begin
  TExtRecorderPack(GPluginInstance).EList.AddEvent('TControlCyclogramEditFrm_EditPlg', c_RC_PlgEdit, doPlgEdit);
  if g_conmng<>nil then
    g_conmng.Events.AddEvent('TControlCyclogramEditFrm_UpdateCfg',E_OnEngUpdateList+E_OnChangeCfg,doUpdateCfg);
end;

procedure TControlCyclogramEditFrm.destroyEvents;
begin
  TExtRecorderPack(GPluginInstance).EList.removeEvent(doPlgEdit, c_RC_PlgEdit);
  if g_conmng<>nil then
    g_conmng.Events.removeEvent(doUpdateCfg, E_OnEngUpdateList);
end;

procedure TControlCyclogramEditFrm.delControl(obj: cbaseobj);
var
  I: Integer;
  li:tlistitem;
  n:pvirtualnode;
begin
  // удаление из таблицы контролов
  for I := 0 to ControlsLV.items.Count - 1 do
  begin
    li:=controlsLV.items[i];
    if li.data=obj then
    begin
      li.Destroy;
      break;
    end;
  end;
  // удаление из дерева
  n:=ProgramTV.GetNodeByPointer(obj);
  if n<>nil then
  begin
    ProgramTV.DeleteNode(n);
  end;
  obj.destroy;
end;

procedure TControlCyclogramEditFrm.save(path: string);
begin
  m_lastfile := path;
  m_conmng.SaveToXML(path, 'ControlCyclogram');
end;

procedure TControlCyclogramEditFrm.load(path: string);
begin
  if g_conmng <> nil then
  begin
    m_conmng.LoadFromXML(path, 'ControlCyclogram');
  end;
end;

procedure TControlCyclogramEditFrm.ShowControls;
var
  I: Integer;
  obj: cbaseobj;
  li: TListItem;
begin
  if m_needShowControls then
  begin
    tagsToCB(g_ir, stoptrigcb);
    ControlsLV.Clear;
    for I := 0 to m_conmng.Count - 1 do
    begin
      obj := m_conmng.GetObj(I);
      if obj is cControlObj then
      begin
        li := ControlsLV.Items.Add;
        EditControlLI(li, cControlObj(obj));
      end;
    end;
    LVChange(ControlsLV);
    m_needShowControls := false;
  end;
end;

procedure TControlCyclogramEditFrm.SaveMenuClick(Sender: TObject);
begin
  if SaveDialog1.Execute(0) then
  begin
    save(SaveDialog1.filename);
    m_fileMng.AddfilePath(SaveDialog1.filename);
  end;
end;

procedure TControlCyclogramEditFrm.OpenMenuClick(Sender: TObject);
begin
  OpenDialog1.FileName:=m_lastfile;
  if OpenDialog1.Execute() then
  begin
    m_lastfile:=OpenDialog1.FileName;
    load(OpenDialog1.FileName);
    ShowControls;
    showprogramInTV;
  end;
end;

procedure TControlCyclogramEditFrm.doPlgEdit(Sender: TObject);
begin
  ShowProperties;
  // show;
  // FormStyle:=fsStayOnTop;
  if ShowModal = mrOk then
  begin

  end;
end;

procedure TControlCyclogramEditFrm.doUpdateCfg(Sender: TObject);
begin
  m_needShowControls := true;
end;

procedure TControlCyclogramEditFrm.LinkPlg(p_conmng: cControlMng);
begin
  m_conmng := p_conmng;
  if p_conmng=nil then exit;

  ModeFrame1.LinkMng(p_conmng);

  createEvents;
end;

procedure TControlCyclogramEditFrm.LoadUI;
var
  f: tinifile;
begin
  f := tinifile.Create(g_startdir + '\ControlCyclogram.ini');
  m_lastfile := f.ReadString('UIControlCyclogram', 'LastFile', '');
  ModeFrame1.load(f, 'UIControlCyclogram');
  ControlEditFrame1.load(f, 'UIControlCyclogram');
  f.destroy;
end;

procedure TControlCyclogramEditFrm.ModeFrame1ShowModesTabBtnClick
  (Sender: TObject);
begin
  ModeFrame1.m_prog:=GetSelectProg;
  ModeFrame1.ShowModesTabBtnClick(Sender);
end;



procedure TControlCyclogramEditFrm.ProgramTVChange(Sender: TBaseVirtualTree;
  Node: PVirtualNode);
var
  obj: cbaseobj;
  n: PVirtualNode;
  Data: PNodeData;
begin
  ShowProgObjProps;
  n := GetSelectNode(ProgramTV);
  Data := ProgramTV.GetNodeData(n);
  if Data <> nil then
  begin
    obj := cbaseobj(Data.Data);
    if obj is cProgramObj then
    begin
      ModeFrame1.m_prog := cProgramObj(obj);
      ModeFrame1.PageControl1.ActivePageIndex:=0;
    end;
    if obj is cModeObj then
    begin
      ModeFrame1.m_prog := cProgramObj(obj.mainParent);
      ModeFrame1.PageControl1.ActivePageIndex:=1;
    end;
  end;
end;

function FindProgramControlsNode(progNode: PVirtualNode): PVirtualNode;
var
  I: Integer;
begin
  result := progNode.FirstChild;
end;

procedure TControlCyclogramEditFrm.ProgramTVDblClick(Sender: TObject);
var
  n:pvirtualnode;
  d:PNodeData;
  p:cprogramobj;
begin
  n := GetSelectNode(ProgramTV);
  if n <> nil then
  begin
    d := ProgramTV.GetNodeData(n);
    if tobject(d.data) is cProgramObj then
    begin
      p := cProgramObj(d.Data);
      ModesTabForm.Show(p);
    end;
  end;
end;

procedure TControlCyclogramEditFrm.ProgramTVDragDrop
  (Sender: TBaseVirtualTree; Source: TObject; DataObject: IDataObject;
  Formats: TFormatArray; Shift: TShiftState; Pt: TPoint; var Effect: Integer;
  Mode: TDropMode);
var
  I: Integer;
  li: TListItem;
  p: cProgramObj;
  c: cControlObj;
  n, controlsNode, child: PVirtualNode;
  d: PNodeData;
begin
  // перетаскиваем vcl компонент
  if DataObject = nil then
  begin
    if Source = ControlsLV then
    begin
      I := 0;
      n := Sender.DropTargetNode;
      // поднимаемся на корневой узел (программа)
      while n.Parent <> Sender.RootNode do
      begin
        n := n.Parent;
      end;
      d := Sender.GetNodeData(n);
      p := cProgramObj(d.Data);
      controlsNode := FindProgramControlsNode(n);

      li := ControlsLV.Selected;
      while I < ControlsLV.SelCount do
      begin
        c := cControlObj(li.Data);
        p.AddControl(c);
        child := Sender.AddChild(controlsNode);
        d := Sender.GetNodeData(child);
        d.color := TVTree(Sender).normalcolor;
        d.caption := c.name;
        d.Data := c;
        d.ImageIndex := c.ImageIndex;
        inc(I);
      end;
    end;
  end;
  Sender.DropTargetNode.States := Sender.DropTargetNode.States + [vsExpanded];
end;

procedure TControlCyclogramEditFrm.ProgramTVDragOver
  (Sender: TBaseVirtualTree; Source: TObject; Shift: TShiftState;
  State: TDragState; Pt: TPoint; Mode: TDropMode; var Effect: Integer;
  var Accept: Boolean);
begin
  Accept := false;
  if Source = ControlsLV then
    Accept := true;
end;

function isChildNode(pnode, cnode:pvirtualnode):boolean;
var
  p:pvirtualnode;
begin
  result:=false;
  p:=cnode.Parent;
  while p<>nil do
  begin
    if p=pnode then
    begin
      result:=true;
      exit;
    end
    else
      p:=p.parent;
  end;
end;


procedure TControlCyclogramEditFrm.ProgramTVKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
var
  next, Node: PVirtualNode;
  Data, parentdata: PNodeData;
  I: Integer;
  obj: cbaseobj;
  p:cProgramObj;
  changestate:boolean;
begin
  if Key = VK_DELETE then
  begin
    Node := ProgramTV.GetFirstSelected(true);
    while Node <> nil do
    begin
      Data := ProgramTV.GetNodeData(Node);
      obj := cbaseobj(Data.Data);
      if obj<>nil then
      begin
        if obj is cControlObj then
        begin
          parentdata:=ProgramTV.GetNodeData(node.Parent.Parent);
          p:=cprogramobj(parentdata.data);
          p.removeOwnControl(cControlObj(obj));
        end
        else
        begin
          obj.destroy;
          Data.Data:=nil;
        end;
      end;
      next := ProgramTV.GetNextSelected(Node, false);
      if next = nil then
      begin
        if Data.Data<>nil then
        begin
          if TObject(Data.Data) is cBaseProgramObj then
          begin
            ModeFrame1.ShowProgObjProps(cBaseProgramObj(Data.Data), true);
          end;
        end;
      end
      else
      begin
        // переходим на след. ветку
        while isChildNode(node, next) do
        begin
          next:=ProgramTV.GetNextSelected(next, false);
        end;
      end;
      Node := next;
      inc(I);
    end;
    lcm;
    ecm;
    ShowChannels;
    showprogramInTV;
  end;
end;

procedure TControlCyclogramEditFrm.saveUI;
var
  f: tinifile;
  path: string;
begin
  path := g_startdir + '\ControlCyclogram.ini';
  f := tinifile.Create(path);
  f.WriteString('UIControlCyclogram', 'LastFile', m_lastfile);
  ModeFrame1.save(f, 'UIControlCyclogram');
  ControlEditFrame1.save(f, 'UIControlCyclogram');
  m_fileMng.save;
  f.destroy;
end;

procedure TControlCyclogramEditFrm.UnLinkPlg;
begin
  destroyEvents;
end;

procedure TControlCyclogramEditFrm.UpdateBtnClick(Sender: TObject);
var
  I: Integer;
  li, next: TListItem;
  con: cControlObj;
  b: Boolean;
begin
  b := false;
  if ControlsLV.Selected = nil then
    exit;
  li := ControlsLV.Selected;
  while li <> nil do
  begin
    b := true;
    con := cControlObj(li.Data);
    ControlEditFrame1.editControl(con);
    next := ControlsLV.GetNextItem(li, sdBelow, [isSelected]);
    // перерисовываем item в таблице
    EditControlLI(li, con);
    if li = next then
      exit;
    li := next;
  end;
  LVChange(ControlsLV);
  g_conmng.configChanged := true;
  ControlEditFrame1.EndControlsMS;
end;

procedure TControlCyclogramEditFrm.UpdatePObjBtnClick(Sender: TObject);
var
  I: Integer;
  n, next: PVirtualNode;
  obj: cbaseobj;
  Data: PNodeData;
begin
  if ProgramTV.SelectedCount > 0 then
  begin
    n := ProgramTV.GetFirstSelected(true);
    while n <> nil do
    begin
      Data := ProgramTV.GetNodeData(n);
      next := ProgramTV.GetNextSelected(n, true);
      obj := cbaseobj(Data.Data);
      if obj is cBaseProgramObj then
      begin
        ModeFrame1.editobj(obj);
        Data.Caption:=obj.name;
      end;
      n := next;
      inc(I);
    end;
  end;
  ProgramTV.Refresh;
  g_conmng.configChanged := true;
end;

procedure TControlCyclogramEditFrm.ShowChannels;
var
  I, ind, tCount: Integer;
  ir: IRecorder;
  t: iTag;
  tname: string;
  li: TListItem;
begin
  ir := getIR;
  // обновляем список каналов
  tCount := ir.GetTagsCount;
  TagsLV.Clear;
  for I := 0 to tCount - 1 do
  begin
    t := iTag(ir.GetTagByIndex(I));
    t._Release;
    tname := t.GetName;
    if ((pos(lowercase(FilterEdit.text), lowercase(tname)) > 0) or
        (FilterEdit.text = '')) then
    begin
      li := TagsLV.Items.Add;
      li.Data := pointer(t);
      TagsLV.SetSubItemByColumnName('Имя', tname, li);
    end;
  end;
  LVChange(TagsLV);

  StopTrigCB.updateTagsList;
  ControlEditFrame1.ShowChannels;
end;

procedure TControlCyclogramEditFrm.ShowProgObjProps();
var
  next, Node: PVirtualNode;
  Data: PNodeData;
  I: Integer;
  p:cProgramObj;
begin
  if ProgramTV.SelectedCount > 0 then
  begin
    Node := ProgramTV.GetFirstSelected(true);
    while Node <> nil do
    begin
      Data := ProgramTV.GetNodeData(Node);
      next := ProgramTV.GetNextSelected(Node, true);
      if next = nil then
      begin
        if TObject(Data.Data) is cBaseProgramObj then
        begin
          ModeFrame1.ShowProgObjProps(cBaseProgramObj(Data.Data), true);
        end;
      end
      else
      begin
        if TObject(Data.Data) is cBaseProgramObj then
        begin
          ModeFrame1.ShowProgObjProps(cBaseProgramObj(Data.Data), false);
        end;
      end;
      Node := next;
      inc(I);
    end;
  end;
end;

procedure TControlCyclogramEditFrm.ShowControlProps();
var
  con: cControlObj;
  b: Boolean;
  li, next: TListItem;
begin
  li := ControlsLV.Selected;
  while li <> nil do
  begin
    b := true;
    con := cControlObj(li.Data);
    next := ControlsLV.GetNextItem(li, sdBelow, [isSelected]);
    if (next = nil) or (next = li) then
    begin
      ControlEditFrame1.ShowControlProps(con, true);
      exit;
    end
    else
      ControlEditFrame1.ShowControlProps(con, false);
    li := next;
  end;
end;

end.
