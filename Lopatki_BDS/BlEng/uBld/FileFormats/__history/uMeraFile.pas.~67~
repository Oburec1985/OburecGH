unit uMeraFile;

interface
uses
  Messages, dialogs,controls, ComCtrls, classes, SysUtils,Windows,
  uTickData, uSensor, uBaseObj, ubldeng, ubinfile, uLoadBldForm, uCommonTypes,
  uVectorlist, uchan, ubaseobjstr, uSetList, inifiles, uMeraSignal;

  type
  TMeraOpts = record
    // имя испытания
    TestName:string;
    // описание испытания
    TestDsc:string;
    // частота оцифровки исходного сигнала
    freq:single;
  end;

  cMeraFile = class
  protected
    opts:TMeraOpts;
    // имя файла
    dir,name:string;
    // список сохраняемых сигналов
    // сигналы должны быть потомками cBaseObj
    signals:tstringlist;
    // сигнал СЕВ
    fUts:csignal;
  protected
    procedure SaveSignalToHeader(signal:cSignal; f:tinifile);
    procedure SaveTrend(signal:cSignal);
    procedure ModNames;
  public
    procedure Save;
    constructor create(p_filename:string; folder:string; p_signals:tstringlist; meraopts:tmeraopts; uts:csignal);
    //destructor destroy;
    procedure DestroySignals;
  end;

implementation

const
  c_mainSection = 'Mera';
  c_TestName = 'Test';
  c_Info = 'Info';
  c_Time = 'Time';
  c_Prod = 'Prod';
  c_freq = 'Freq';
  c_XUnits = 'XUnits';
  c_YUnits = 'YUnits';
  c_CharTP = 'c_CharTP';
  c_k0 ='k0';
  c_k1 ='k1';
  c_YFormat = 'YFormat';
  c_XFormat = 'XFormat';
  c_ChanID = 'ChanID';
  c_ChanNo = 'ChanNо';
  c_Start = 'Start';
  c_Z = 'ZSize';
  c_Zstep = 'ZStep';

procedure cMeraFile.ModNames;
var
  i:integer;
begin
  if pos('.mera', name)>0 then
  begin
    dir:=extractfiledir(name)+'\';
    name:=extractfilename(name);
  end
  else
  begin
    for I := length(dir) downto 1 do
    begin
      if dir[i]='\' then
      begin
        name:=copy(dir,i+1,length(dir)-i)+'.mera';
        break;
      end;
    end;
    dir:=dir+'\';
  end;
end;

constructor cMeraFile.create(p_filename:string; folder:string;p_signals:tstringlist; meraopts:tmeraopts; uts:csignal);
begin
  dir:=folder;
  name:=p_filename;
  // список сохраняемых сигналов
  signals:=p_signals;
  // опции mera файла (частота дискретизации, описание испытания, имя испытания)
  opts:=meraopts;
  modnames;
  fUts:=uts;
end;

procedure cMeraFile.Save;
var
  f:tinifile;
  date:tdatetime;
  datestr:string;
  i:integer;
begin
  if not DirectoryExists(dir) then
    ForceDirectories(dir);
  f:=tinifile.Create(dir+name);
  // имя испытания
  f.WriteString(c_mainSection, c_TestName, opts.TestName);
  // Описание испытания
  f.WriteString(c_mainSection, c_Info, opts.TestDsc);
  // Время испытания
  date:=now;
  datestr:=DateToStr(date)+' '+TimeToStr(date);
  f.WriteString(c_mainSection, c_Time, datestr);
  for I := 0 to signals.Count - 1 do
  begin
    // сохранить заголовочную информацию
    SaveSignalToHeader(cSignal(signals.objects[i]),f);
    // сохранить данные
    SaveTrend(cSignal(signals.objects[i]));
  end;
  if fUts<>nil then
    // сохранить СЕВ
    SaveTrend(futs);
    //SaveSignalToHeader(futs,f);
  f.Destroy;
end;

procedure cMeraFile.SaveSignalToHeader(signal:cSignal; f:tinifile);
var
  t:extended;
begin
  if signal.WriteXY then
  begin
    // пишем имя сигнала
    f.WriteString(signal.getname, 'XFile', signal.getname + '.x');
  end;
  // пишем имя сигнала
  f.WriteFloat(signal.getname, c_freq, signal.freqx);
  // Подпись оси x
  f.WriteString(signal.getname, c_XUnits, signal.xunits);
  // Подпись оси Y
  f.WriteString(signal.getname, c_YUnits, signal.yunits);
  // формат x
  f.WriteString(signal.getname, c_XFormat, 'single');
  // формат Y
  f.WriteString(signal.getname, c_YFormat, 'single');
  // k0
  f.WriteFloat(signal.getname, c_k0, signal.k0);
  // k1
  f.WriteFloat(signal.getname, c_k1, signal.k1);
  // СЕВ
  if (fUTS<>nil) and (signal<>fUTS) then
  begin
    f.WriteString(signal.getname, 'UTS_Channel', fUTS.getname);
  end;
  // время нуля
  t:=signal.GetT0;
  f.WriteDateTime(signal.getname, c_Start, t);
  if signal.b_3d then
  begin
    f.WriteInteger(signal.getname,c_Z , round(signal.count/ signal.portionsize));
    f.WriteInteger(signal.getname,c_Zstep , signal.dZ);
  end
  else
    f.WriteInteger(signal.getname, c_Zstep, 0);
end;

procedure cMeraFile.SaveTrend(signal:cSignal);
var
  f,fx:file;
  i:integer;
  dt, x, endT, y:single;
  p2:point2;
begin
  AssignFile(f,dir+signal.getname+'.dat');
  Rewrite(f,1);
  if signal.WriteXY then
  begin
    AssignFile(fx,dir+signal.getname+'.x');
    Rewrite(fx,1);
  end;
  dt:=1/signal.freqX;
  if signal.WriteXY or signal.b_3d then
  begin
    // если сигнал сплайновый то пишем с частотой дискретизации указанной в файле
    for I := 0 to signal.count - 1 do
    begin
      p2:=signal.GetP2(i);
      WriteSingle(f,p2.y);
      if not signal.b_3d then
        WriteSingle(fx,p2.x);
    end;
  end
  else
  begin
    x:=signal.GetP2(0).x;
    endT:=signal.GetTEnd;
    // пишем y сигнала
    while x<endT do
    begin
      y:=signal.GetY(x);
      WriteSingle(f,y);
      x:=x+dt;
    end;
  end;
  // Длина одной записываемой единицы.
  CloseFile(f); // Закрыть файл
  if signal.WriteXY then
  begin
    CloseFile(fx);
  end;
end;

procedure cMeraFile.DestroySignals;
var
  I: Integer;
  s:csignal;
begin
  for I := 0 to signals.Count - 1 do
  begin
    s:=csignal(signals.Objects[i]);
    s.Destroy;
  end;
  if fUts<>nil then
    fUTS.Destroy;
  signals.clear;
end;

end.
