// здесь собраны процедуры по отображению объектов движка в компоненты delphi
unit uBldCompProc;

interface
uses classes, ubtnListView, uBldObj, StdCtrls, Controls, ComCtrls,
     usensor, sysutils, uBaseObj, uBldEng,uBaseObjTypes, upair, ustage,
     uCommonMath, uturbina, uBaseObjService, mathfunction, uBldGlobalStrings;


  procedure AddPairToLV(lv:tbtnlistview;pair:cpair);
  // отобразить дочерние пары объекта в LV
  procedure showChildPairsInLV(lv:tbtnlistview;obj:cbaseobj);
  // Скопировать данные из lv (строка под номером index) в sensor
  procedure getSensorFromLV(lv:tbtnlistview;index:integer;sensor:cSensor);
  // отобразить список объектов в lv с применением сортировки по типу
  procedure ShowEngInLV_typeSort(lv:tbtnlistview;eng:cbldEng);
  // показать каналы
  procedure ShowEngChansInLV(lv:tbtnlistview;eng:cbldEng);
  // отобразить объекты движка в дереве
  procedure ShowEngInTreeView(tv:ttreeview;eng:cbldEng);
  // получить объект из ListView
  function GetEngObj(lv:tbtnlistview;eng:cbldEng;li:tlistitem):cbldobj;
  // отобразить в LV Список каналов
  //function ShowChannelsInLV(lv:tbtnlistview;eng:cbldEng;li:tlistitem):cbldobj;
  // отобразить список лопаток в ListView
  procedure showBladesInLV(lv:tbtnlistview;stage:cstage);
  procedure showShapeInLV(lv:tbtnlistview; stage:cstage);
  // отобразить тахо датчики в комбо боксе
  procedure ShowTahoInCB(e:cBldEng; CB:TComboBox);overload;
  procedure ShowTahoInCB(e:cBldEng; stage:cstage; CB:TComboBox);overload;
  // отобразить ступени в комбо боксе
  procedure ShowStageInCB(e:cBldEng; CB:TComboBox);overload;
  procedure ShowStageInCB(e:cBldEng; turbine:cturbine; CB:TComboBox);overload;
  // Отобразить датчики в LV
  procedure AddSensorToLV(lv:tbtnlistview;sensor:cSensor);
  procedure ShowEngSensorsInLV(lv:tbtnlistview; eng:cbldeng);
  // добавить дочерние датчики
  procedure ShowSensorsInLV(lv:tbtnlistview;obj:cBldObj);overload;
  procedure ShowSensorsInLV(lv:tbtnlistview;obj:cbaseObjList);overload;
  procedure InitDigitsLV(lv:tbtnListView);
  // подготовить listView для отображения туда лопаток ступени( правильно именует колонки)
  procedure initBladesLV(lv:tlistview);
  procedure initSensorsLV(lv:tbtnlistview);
  procedure initPairsLV(lv:tbtnlistview);


implementation

procedure InitDigitsLV(lv:tbtnListView);
var
  col:tlistcolumn;
begin
  lv.Columns.Clear;
  col:=lv.Columns.Add;
  col.Caption:=v_ColNum;
  col.width:=100;
  // добавляем колонки с стандартными именами
  col:=lv.Columns.Add;
  col.Caption:=v_ColName;
  col.width:=100;
  // добавляем колонку тип
  col:=lv.Columns.Add;
  col.Caption:=v_ColType;
  col.width:=100;
  // добавляем колонку источник сигнала
  col:=lv.Columns.Add;
  col.Caption:=v_ColAdress;
  col.width:=100;
  // добавляем колонку значение
  col:=lv.Columns.Add;
  col.Caption:=v_ColValue;
  col.width:=100;
end;

procedure initBladesLV(lv:tlistview);
var
  col:tlistcolumn;
begin
  lv.Columns.Clear;
  col:=lv.Columns.Add;
  col.Caption:=v_ColNum;
  // добавляем колонки с стандартными именами
  col:=lv.Columns.Add;
  col.Caption:=v_ColSensorPos;
end;

procedure showBladesInLV(lv:tbtnlistview; stage:cstage);
var
  i:integer;
  li:tlistitem;
begin
  lv.Clear;
  for I := 0 to stage.BladeCount - 1 do
  begin
    li:=lv.Items.Add;
    lv.SetSubItemByColumnName(v_ColNum,inttostr(i),li);
    lv.SetSubItemByColumnName(v_ColSensorPos,floattostr(stage.shape.Blades[i]),li);
  end;
end;

procedure showShapeInLV(lv:tbtnlistview; stage:cstage);
var
  i:integer;
  li:tlistitem;
begin
  if length(stage.Shape.offset)<>0 then
  begin
    lv.Clear;
    for I := 0 to length(stage.Shape.offset) - 1 do
    begin
      li:=lv.Items.Add;
      lv.SetSubItemByColumnName(v_ColNum,inttostr(i),li);
      lv.SetSubItemByColumnName(v_ColSensorPos,formatstr(stage.Shape.offset[i],3),li);
    end;
  end;
end;




procedure AddPairToLV(lv:tbtnlistview;pair:cpair);
var
  li:tlistitem;
  sensor:csensor;
  I: Integer;
begin
  li:=lv.items.add;
  lv.SetSubItemByColumnName
     (GetConstString(v_Stage),pair.stagename,li);
  lv.SetSubItemByColumnName(v_ColNum,inttostr(li.index),li);
  lv.SetSubItemByColumnName(v_ColName,pair.Name,li);
  for I := 0 to pair.SensorsCount - 1 do
  begin
    sensor:=pair.GetSensor(i);
    case i of
      0: lv.SetSubItemByColumnName(v_ColEdgeSensor, sensor.name, li);
      1: lv.SetSubItemByColumnName(v_ColRootSensor, sensor.name, li);
    end;
  end;
end;

function ShowPairLV(obj:cBaseObj; data:pointer):boolean;
var i:integer;
begin
  result:=true;
  if obj is cpair then
    AddPairToLV(tbtnlistview(data),cpair(obj));
  if obj is csensor then
  begin
    for i:= 0 to csensor(obj).pairsCount - 1 do
    begin
      AddPairToLV(tbtnlistview(data),cpair(csensor(obj).getpair(i)));
    end;
  end;
end;

procedure showChildPairsInLV(lv:tbtnlistview;obj:cbaseobj);
begin
  lv.Clear;
  obj.EnumGroupMembers(ShowPairLV,lv);
end;

procedure getSensorFromLV(lv:tbtnlistview;index:integer;sensor:csensor);
var
  li:tlistitem;
  str:string;
begin
  li:=lv.Items[index];
  lv.GetSubItemByColumnName(v_Stage,li,str);
  sensor.stagename:=str;
  // имя датчика
  lv.GetSubItemByColumnName(v_ColName,li,str);
  sensor.name:=str;
  // тип датчика
  lv.GetSubItemByColumnName(v_ColType,li,str);
  sensor.sensortype:=sensorstringToInt(str);
  // Номер канала датчика
  lv.GetSubItemByColumnName(v_ColNum,li,str);
  sensor.ChanNumber:=strtoint(str);
  // Позиция датчика
  lv.GetSubItemByColumnName(v_ColSensorPos,li,str);
  if str<>'' then
  begin
    sensor.pos:=strtofloat(str);
  end;
end;

function ShowInLV(obj:cBaseObj; data:pointer):boolean;
begin
  result:=true;
  if obj is csensor then
    AddSensorToLV(tbtnlistview(data),csensor(obj));
end;

procedure ShowSensorsInLV(lv:tbtnlistview;obj:cBldObj);
begin
  lv.Clear;
  obj.EnumGroupMembers(ShowInLV, lv);
end;

procedure ShowSensorsInLV(lv:tbtnlistview;obj:cbaseObjList);
var
  I: Integer;
  sensor:cbldobj;
begin
  lv.Clear;
  for I := 0 to obj.Count - 1 do
  begin
    sensor:=cbldobj(obj.getobj(i));
    if sensor is csensor then
      AddSensorToLV(lv,csensor(sensor));
  end;
end;

procedure ShowEngChansInLV(lv:tbtnlistview;eng:cbldEng);
var
  obj:cbldobj;
  i:integer;
begin
  lv.clear;
  lv.SmallImages:=eng.images_16;
  for I := 0 to eng.chancount - 1 do
  begin
    obj:=cbldobj(eng.getchan(i));
    ShowBaseObjInLV(lv,obj);
  end;
end;

procedure ShowEngInLV_typeobj(lv:tbtnlistview;eng:cBldEng; objtype:integer);
var
  obj:cbldobj;
  i:integer;
begin
  for I := 0 to eng.count - 1 do
  begin
    obj:=cbldobj(eng.getobj(i));
    if objtype=obj.objtype then
    begin
      ShowBaseObjInLV(lv,obj);
    end;
  end;
end;

procedure ShowEngInLV_typeSort(lv:tbtnlistview;eng:cbldEng);
begin
  lv.Clear;
  lv.SmallImages:=eng.images_16;
  ShowEngInLV_typeobj(lv,eng,c_turbine);
  ShowEngInLV_typeobj(lv,eng,c_stage);
  ShowEngInLV_typeobj(lv,eng,c_pair);
  ShowEngInLV_typeobj(lv,eng,c_sensor);
end;

function GetEngObj(lv:tbtnlistview;eng:cbldEng;li:tlistitem):cbldobj;
var str:string;
begin
  lv.GetSubItemByColumnName(v_ColName,li,str);
  result:=cbldobj(eng.getobj(str));
end;

procedure ShowEngInTreeView(tv:ttreeview;eng:cbldEng);
var
  i:integer;
  obj:cbldobj;
  root:boolean;
  sensorsNode:ttreenode;
begin
  obj:=nil;
  tv.Items.Clear;
  tv.Images:=eng.images_16;
  for i := 0 to eng.count - 1 do
  begin
    obj:=cbldobj(eng.getobj(i));
    root:=obj.root;
    if root then
      ShowInTreeViwe(obj,tv);
  end;
  // отображаем список каналов
  if eng.ChanCount<>0 then
  begin
    sensorsNode:=tv.Items.AddChildObject (nil,'Каналы',nil);
    sensorsNode.ImageIndex:=c_Hardware_img;
    sensorsNode.SelectedIndex:=c_Hardware_img;
    for I := 0 to eng.chancount - 1 do
    begin
      obj:=cbldobj(eng.getchan(i));
      ShowObjectInTreeView(obj,tv,sensorsNode);
    end;
  end;
end;

procedure ShowTahoInCB(e:cBldEng; CB:TComboBox);
var
  i:integer;
  s:cbldobj;
begin
  CB.Clear;
  if e<>nil then
  begin
    for I := 0 to e.count - 1 do
    begin
      s:=cbldobj(e.getobj(i));
      if s is csensor then
      begin
        if csensor(s).sensortype=c_rot then
          cb.AddItem(s.name,s);
      end;
      cb.ItemIndex:=0;
    end;
  end;
end;

procedure ShowTahoInCB(e:cBldEng; stage:cstage; CB:TComboBox);
var
  i:integer;
  s:csensor;
begin
  CB.Clear;
  for I := 0 to stage.SensorsCount - 1 do
  begin
    s:=stage.GetSensor(i);
    if s.sensortype=c_rot then
      cb.AddItem(s.name,s);
  end;
  cb.ItemIndex:=0;
end;

procedure ShowStageInCB(e:cBldEng; CB:TComboBox);
var
  i:integer;
  s:cbldobj;
begin
  CB.Clear;
  if e<>nil then
  begin
    for I := 0 to e.count - 1 do
    begin
      s:=cbldobj(e.getobj(i));
      if s is cstage then
      begin
        CB.AddItem(s.name,s);
      end;
      cb.ItemIndex:=0;
    end;
  end;
end;

procedure ShowStageInCB(e:cBldEng; turbine:cturbine; CB:TComboBox);
var
  i:integer;
  s:cstage;
begin
  CB.Clear;
  for I := 0 to turbine.StageCount - 1 do
  begin
    s:=turbine.GetStage(i);
    cb.AddItem(s.name,s);
  end;
  cb.ItemIndex:=0;
end;

procedure initPairsLV(lv:tbtnlistview);
var
  col:tlistcolumn;
begin
  lv.Columns.Clear;
  col:=lv.Columns.Add;
  col.Caption:=v_ColNum;
  // колонка Имя
  col:=lv.Columns.Add;
  col.Caption:=v_ColName;
  col.Width:=70;
  // колонка Тип
  col:=lv.Columns.Add;
  col.Caption:=v_Stage;
  col.Width:=70;
  // колонка Положение
  col:=lv.Columns.Add;
  col.Caption:=v_ColEdgeSensor;
  col.Width:=70;
  // колонка Пропуск лопаток
  col:=lv.Columns.Add;
  col.Caption:=v_ColRootSensor;
  col.Width:=70;
end;

procedure initSensorsLV(lv:tbtnlistview);
var
  col:tlistcolumn;
begin
  lv.Columns.Clear;
  col:=lv.Columns.Add;
  col.Caption:=v_ColNum;
  // колонка Имя
  col:=lv.Columns.Add;
  col.Caption:=v_ColName;
  col.Width:=70;
  // колонка Тип
  col:=lv.Columns.Add;
  col.Caption:=v_ColType;
  col.Width:=70;
  // колонка Положение
  col:=lv.Columns.Add;
  col.Caption:=v_ColSensorPos;
  col.Width:=70;
  // колонка Пропуск лопаток
  col:=lv.Columns.Add;
  col.Caption:=v_ColSkipBlades;
  col.Width:=70;
  // колонка Растояние до первой лопатки
  col:=lv.Columns.Add;
  col.Caption:=v_ColFirstOffset;
  col.Width:=70;
  // колонка Число импульсов
  col:=lv.Columns.Add;
  col.Caption:=v_ColImpulsNum;
  col.Width:=70;
  // колонка Ступень импульсов
  col:=lv.Columns.Add;
  col.Caption:=v_Stage;
  col.Width:=70;
end;

procedure AddSensorToLV(lv:tbtnlistview;sensor:cSensor);
var li:tlistitem;
begin
  li:=lv.items.add;
  li.data:=sensor;
  lv.SetSubItemByColumnName(v_Stage,sensor.stagename,li);
  // Если ступень всего одна, но датчикам ступени не сопоставлены, то относим
  // все датчики к одной ступени
  lv.SetSubItemByColumnName(v_ColNum,inttostr(sensor.ChanNumber),li);
  lv.SetSubItemByColumnName(v_ColImpulsNum,inttostr(sensor.ticksCount),li);
  lv.SetSubItemByColumnName(v_ColName,sensor.Name,li);
  lv.SetSubItemByColumnName(v_ColSensorPos,floattostr(sensor.pos),li);
  // вписать тип датчика
  lv.SetSubItemByColumnName(v_ColType,sensor.sensorstring,li);
  lv.SetSubItemByColumnName(v_ColSkipBlades,inttostr(sensor.skipBlade),li);
  lv.SetSubItemByColumnName(v_ColFirstOffset,floattostr(sensor.firstBladeOffset),li);
end;

procedure ShowEngSensorsInLV(lv:tbtnlistview; eng:cbldeng);
var
  I: Integer;
  obj:cbldobj;
begin
  lv.Clear;
  for I := 0 to eng.Count - 1 do
  begin
    obj:=cbldobj(eng.getobj(i));
    if obj is csensor then
    begin
      AddSensorToLV(lv,csensor(obj));
    end;
  end;
end;

end.
