unit uMultiSensor;

interface
uses
  classes, sysutils,Graphics,  controls, stdctrls,
  uBldMath, uCommonMath, uErrorProc, uBldObj, uTickdata, usensor, uProgressDlg,
  ubldeng, uBaseBldAlg, ustage, uBaseObj, RepODS, uturbina, PathUtils,
  usensorlist, uCommonTypes, utrend;

type
  cMultiSensorOpts = class(cbaseopts)
    blade:integer;
  public
    constructor create;override;
  end;
  // алгоритм восстанавливает сигнал вибрации по всему колесу
  cMultiSensor = class(cBaseBldAlg)
  protected
    blade:integer;
    trend:ctrend;
  protected
    // вызывается для каждого корректного оборота CommonSensorProc
    // при этом индекс оборота, начало и конец оборота, храняться в protected
    // мемберах
    function TurnSensorProc(s:csensor):integer;override;
    procedure CommonSensorProc(taho:csensor;sensors:cAlgSensorList);override;
    // обработка ошибок. если возникает ошибка возвращает false
    function ProcessErrors(taho:csensor; sensors:cAlgSensorList):boolean;override;
  public
  end;

  procedure BuildMultiSensor(taho:csensor; sensors:cAlgSensorList; data:pointer);

implementation
uses
  uMultiSensorForm;


constructor cMultiSensorOpts.create;
begin
  inherited;
end;


function cMultiSensor.TurnSensorProc(s:csensor):integer;
var
  j:integer;
begin
  // Подсчитываем число импульсов укладывающихся в каждый столбец гистограммы
  result:=0;
  // индекс импульса от лопатки в обороте
  j:=GetBladeImpulsIndex(s,blade) + sensorind;
  EvalTurnCluster(s,j);
  trend.AddPoint(turncluster.p2);
end;

procedure cMultiSensor.CommonSensorProc(taho:csensor;sensors:cAlgSensorList);
begin
  inherited;
end;


function cMultiSensor.ProcessErrors(taho:csensor;sensors:cAlgsensorList):boolean;
var
  l:integer;
  sensor:csensor;
begin
  if inherited ProcessErrors(taho,sensors)=false then
  begin
    result:=false;
    exit;
  end;
  result:=ProcClusterError(taho,sensors);
end;

procedure BuildMultiSensor(taho:csensor; sensors:cAlgSensorList; data:pointer);
var
  alg: cMultiSensor;
  // форма настройки пары
  PairShapeForm: TMultiSensorForm;
  // опции алгоритма
  opts:cMultiSensorOpts;
begin
  // задание опций
  if data=nil then
  begin
    taho.eng.getmessage('Необходимо выбрать линию!' ,c_errorMessage);
    exit;
  end;
  opts:=cMultiSensorOpts.Create;
  opts.eng:=taho.eng;
  opts.stage:=cstage(sensors.stage);
  opts.useBladesPos:=true;
  opts.callBadTicksProc:=true;
  PairShapeForm:=TMultiSensorForm.Create(nil);
  if PairShapeForm.ShowModal(taho,sensors,opts)=mrok then
  begin
    alg:=cMultiSensor.create;
    alg.getOpts(opts);

    alg.trend:=ctrend(data);
    alg.trend.Clear;
    alg.blade:=opts.blade;
    alg.apply(taho,sensors,opts);
    alg.Destroy;
  end;
  PairShapeForm.Destroy;
  opts.Destroy;
end;

end.
