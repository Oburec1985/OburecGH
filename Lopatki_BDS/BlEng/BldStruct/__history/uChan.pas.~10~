// Модуль описsdftn канал измерительной платы
unit uChan;

interface
uses uTickData, uBldObj, uBaseObjTypes, ubaseobj, sysutils, uTicks, uArrayTicks;

type
  cChan = class(cBldObj)
    // массив тиков
    ticks:cbaseticks;
    // усиление канала
    Amplifier:byte;
  protected
    fchan:integer;
  protected
    function SupportedChildClass(obj:cbaseobj):boolean;override;
    function SupportedChildClass(classname:string):boolean;override;
    function SupportedChildClass(objtype:integer):boolean;override;
    procedure setchan(b:integer);
  public
    property chan:integer read fchan write setchan;
    constructor create;overload;override;
    constructor create(ticksType:integer);overload;
    destructor destroy;override;
    function ticksCount:integer;
    // пересоздает массив тиков
    procedure CreateTicks(ticktype:integer);
  end;

const
  c_ArrayTicks = 1;
  c_Sortedticks = 2;

implementation

constructor cChan.create;
begin
  inherited;
  helper:=false;
  CreateTicks(c_ArrayTicks);
  imageindex:=c_Hardware_img;
  objtype:=c_chan;
end;

constructor cChan.create(ticksType:integer);
begin
  inherited create;
  helper:=false;
  CreateTicks(c_SortedTicks);
  imageindex:=c_Hardware_img;
  objtype:=c_chan;
end;

destructor cChan.destroy;
begin
  ticks.destroy;
  ticks:=nil;
  inherited;
end;

function cChan.SupportedChildClass(obj:cbaseobj):boolean;
begin
  result:=false;
end;

function cChan.SupportedChildClass(classname:string):boolean;
begin
  result:=false;
end;

function cChan.SupportedChildClass(objtype:integer):boolean;
begin
  result:=false;
end;

procedure cChan.setchan(b:integer);
begin
  fchan:=b;
  name:=name+inttostr(b);
end;

function cChan.ticksCount:integer;
begin
  result:=ticks.Count;
end;

procedure cChan.CreateTicks(ticktype:integer);
begin
  if ticks<>nil then
  begin
    ticks.destroy;
  end;
  case ticktype of
    c_ArrayTicks: ticks:=cArrayTicks.create;
    c_SortedTicks: ticks:=cSortedTicks.create;
  end;
end;

end.
