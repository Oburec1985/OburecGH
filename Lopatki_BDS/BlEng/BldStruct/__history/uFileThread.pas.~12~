unit uFileThread;

interface
uses
  windows, uBaseObj, classes, SysUtils,
  uCommonMath, uEventtypes, ExtCtrls, uBaseObjMng,
  NativeXML, uEventList, dialogs, uSetList, uDataThread;


type
  cID = class
    time:tDateTime;
    // тип файла
    filetype:integer;
    // идентификатор загружаемого замера
    intID:integer;
    // файл обработан
    m_processed:boolean;
    fName:string;
  end;

  cIDSet = class(cSetList)
  public
    Function GetID(i:integer):cID;overload;
    Function GetID(fname:string):cID;overload;
    constructor create;override;
    destructor destroy;override;
    procedure deletechild(node:pointer);override;
  end;

  // класс для обозначения мнест вызовов синхронных и асинхронных событий
  // в контексте BaseObj-ов
  cFileThread = class(cDataThread)
  protected
    // расширение загружаемых файлов
    m_NamePart, m_ext,
    // папка с загружаемыми файлами
    m_folder:string;
    // список идентификаторов которые надо загрузить
    m_IDList:cIDSet;
    // текущий обрабатываемый файл
    curID:integer;
    // массивы тиков (буфер данных для обмена с движком)
    channels:cBaseObj;
  protected
    procedure PlayFunc;override;
  public
    constructor create;override;
  end;

implementation

constructor cFileThread.create;
begin
  inherited;
  m_IDList:=cIDSet.create;
  m_IDList.destroydata:=true;
  fPeriod:=1000;
  m_ext:='.sdt';
  m_NamePart:='';
  curID:=0;
  channels:=cBaseObj.create;
  channels.destroydata:=true;
  Linc(tProc);
  // создаем событие ожидания новых данных/
  // необходимо сбрасывать вручную/ начальное состояние/ имя события
  ExchangeDataEvent:=CreateEvent(nil, True, False, nil);

  // настройки потока
  FreeOnTerminate:=false;
  Priority:=tpLower;

  createEvents;

end;

procedure cFileThread.PlayFunc;
begin
  inherited;
end;

function IDcomparator(p1,p2:pointer):integer;
begin
  result:=0;
  if cID(p1).intID>cID(p2).intID then
  begin
    result:=1
  end
  else
  begin
    if cID(p1).intID<cID(p2).intID then
    begin
      result:=-1
    end
  end;
end;


constructor cIDSet.create;
begin
  inherited;
  comparator:=idComparator;
end;

destructor cIDSet.destroy;
begin
  inherited;
end;

procedure cIDSet.deletechild(node:pointer);
begin
  cID(node).destroy;
end;

Function cIDSet.GetID(i:integer):cID;
begin
  result:=cID(getNode(i));
end;

Function cIDSet.GetID(fname:string):cID;
var
  I: Integer;
  id:cid;
begin
  result:=nil;
  for I := 0 to Count - 1 do
  begin
    id:=GetID(i);
    if id.fName=fname then
    begin
      result:=id;
      exit;
    end;
  end;
end;

end.
