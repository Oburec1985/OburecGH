unit uTaskMng;

interface

uses
  ubldmath, classes, ubldEngEventTypes,
  uCommonMath, ExtCtrls, ubaseobj, uEventTypes, usensor,
  NativeXML, uProcessAlgTask, uBaseObjMng, uBldEng;

type
  cTaskMng = class(cBaseObjMng)
  public
    eng:cbldeng;
    factivetask:cTask;
  protected
  protected
    procedure regObjClasses;override;
    procedure XMLSaveMngAttributes(node:txmlnode);override;
    procedure XMLlOADMngAttributes(node:txmlnode);override;
    procedure AddBaseObjInstance(obj:cbaseobj);override;
    procedure CreateEvents;
    procedure destroyEvents;
    procedure ChangeCfg(sender:tobject);
  protected
    function getactivetask:ctask;
    function getTask(i:integer):ctask;
  public
    constructor create;override;
    Function CreateObjByType(Classname:string):cbaseobj;override;
    procedure linc(p_eng:cbldeng);
  public
    property activetask:ctask read getactivetask write factivetask;
  end;


implementation

constructor cTaskMng.create;

begin
  inherited;
  objects.destroydata:=true;
end;

procedure cTaskMng.AddBaseObjInstance(obj:cbaseobj);
begin
  inherited;
end;

procedure cTaskMng.regObjClasses;
begin
  inherited;
  regclass(ctask);
end;

Function cTaskMng.CreateObjByType(Classname:string):cbaseobj;
begin
  result:=inherited CreateObjByType(Classname);
end;

procedure cTaskMng.XMLSaveMngAttributes(node:txmlnode);
begin
  inherited;
end;

procedure cTaskMng.XMLlOADMngAttributes(node:txmlnode);
begin
  inherited;
end;

procedure cTaskMng.linc(p_eng:cbldeng);
begin
  eng:=p_eng;
end;

function cTaskMng.getactivetask:ctask;
begin
  result:=nil;
  if factivetask=nil then
  begin
    if count<>0 then
    begin
      factivetask:=ctask(getobj(0));
    end;
  end;
  result:=factivetask;
end;

function cTaskMng.getTask(i:integer):ctask;
begin
  result:=ctask(getobj(i));
end;

procedure cTaskMng.CreateEvents;
begin
  if eng<>nil then
  begin
    eng.Events.AddEvent('cTaskMng_OnChangeCfg',E_OnDestroyObject,ChangeCfg);
  end;
end;

procedure cTaskMng.destroyEvents;
begin
  if eng<>nil then
  begin
    eng.Events.removeEvent(ChangeCfg,E_OnDestroyObject);
  end;
end;

procedure cTaskMng.ChangeCfg(sender:tobject);
var
  I: Integer;
  t:ctask;
begin
  for I := 0 to Count - 1 do
  begin
    if sender is csensor then
    begin
      t:=gettask(i);
      if t.Thread.taho=sender then
        t.Thread.taho:=nil;
    end;
  end;
end;

end.
