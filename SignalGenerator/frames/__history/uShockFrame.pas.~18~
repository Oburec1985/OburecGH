unit uShockFrame;

interface

uses
  Windows, Forms,  StdCtrls, DCL_MYOWN, uSignal, Controls, Classes, math, uCommonMath;

type
  TShockFrame = class(TFrame)
    LengthLabel: TLabel;
    LengthFE: TFloatEdit;
    ALabel: TLabel;
    AFE: TFloatEdit;
    BeforeShockLabel: TLabel;
    BeforeShockFE: TFloatEdit;
    AfterShockLabel: TLabel;
    AfterShockFE: TFloatEdit;
    DscLabel: TLabel;
    DscEdit: TEdit;
  private
    m_s:csignal;
  private
    function createDsc:string;
  public
    procedure CreateSignal(s:csignal);
  end;

implementation

{$R *.dfm}
function TShockFrame.createDsc:string;
begin
  result:='F='+formatstr(m_s.fs,3)+'/ Длительность=' +formatstr(LengthFE.FloatNum,3)+
  +'/ A='+formatstr(AFE.FloatNum,3)+'/ T0='+formatstr(BeforeShockFE.FloatNum,3)+
  '/ T1='+formatstr(AfterShockFE.FloatNum,3);
  dscEdit.text:=result;
end;


procedure TShockFrame.CreateSignal(s:csignal);
var
  i:integer;
  // текущее время
  t,
  // приращение времени при данной частоте дискретизации
  dt,
  pi2,
  // угловая скорость в радианах
  w,
  phase,
  // частота синуса в ударе
  SinFreq:single;
begin
  s.signallength:=trunc(s.fs*(lengthfe.FloatNum+BeforeShockFE.FloatNum+AfterShockFE.FloatNum));
  s.dsc:=s.dsc+createDsc;
  dt:=s.getdt;
  // удвоенное число pi
  pi2:=2*pi;
  t:=0;
  i:=0;
  // генерим 0 перед ударом
  while t<BeforeShockFE.FloatNum do
  begin
    s.points[i]:=0;
    t:=t+dt;
    inc(i);
  end;
  t:=0;
  SinFreq:=1/(LengthFE.FloatNum*2);
  w:=SinFreq*pi2;
  phase:=0;
  // генерим удар (полуволна)
  while t<LengthFE.FloatNum do
  begin
    s.points[i]:=Afe.FloatNum*sin(phase);
    t:=t+dt;
    phase:=w*t;
    inc(i);
  end;
  t:=0;
  // генерим после удара
  while t<AfterShockFE.FloatNum do
  begin
    s.points[i]:=0;
    t:=t+dt;
    inc(i);
  end;
end;

end.
