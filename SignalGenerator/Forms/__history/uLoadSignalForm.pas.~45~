unit uLoadSignalForm;

interface

uses
  Windows, SysUtils, Classes, Graphics, Forms, umerasignal, inifiles, uCommonTypes,
  Dialogs, StdCtrls, DCL_MYOWN, Controls, umerafile, ubuffsignal;

type
  TLoadSignalForm = class(TForm)
    PathBtn: TButton;
    OpenDialog1: TOpenDialog;
    PathEdit: TEdit;
    CancelBtn: TButton;
    ApplyBtn: TButton;
    procedure PathBtnClick(Sender: TObject);
  public
    signals:cMeraFile;
  private
  public
    function LoadMera(path:string):boolean;
    function LoadSignals(p_signals:cMeraFile):boolean;
  end;

var
  LoadSignalForm: TLoadSignalForm;

implementation

{$R *.dfm}

function TLoadSignalForm.LoadSignals(p_signals:cMeraFile):boolean;
begin
  result:=false;
  signals:=p_signals;
  if showmodal=mrok then
  begin
    //result:=LoadMera(PathEdit.Text);
    signals.Load(PathEdit.Text);
  end;
end;

procedure TLoadSignalForm.PathBtnClick(Sender: TObject);
begin
  if OpenDialog1.execute then
  begin
    pathedit.Text:=opendialog1.FileName;
  end;
end;

function TLoadSignalForm.LoadMera(path:string):boolean;
var
  ifile:tinifile;
  sections:tstringlist;
  folder,fname:string;
  I,j,len,read: Integer;
  s:csignal;
  f,f2:file;
  freq:single;
begin
  result:=false;
  ifile:=TIniFile.Create(path);
  sections:=tstringlist.Create;
  ifile.ReadSections(sections);
  folder:=extractfiledir(path);
  signals.clear;
  for I := 0 to sections.Count - 1 do
  begin
    if lowercase(sections.Strings[i])<>'mera' then
    begin
      fname:=folder+'\'+sections.Strings[i]+'.dat';
      if fileexists(fname) then
      begin
        freq:=ifile.ReadInteger(sections.Strings[i],'freq',1);
        if freq<=0 then
        begin
          s:=cbuffsignal.create;
          s.name:=sections.Strings[i];
          s.ffreqX:=freq;
          AssignFile(f,fname);
          reset(f,1);
          len:=trunc(FileSize(f)/4);
          s.capacity:=len;
          for j := 0 to len - 1 do
          begin
            blockread(f, cbuffsignal(s).points2d[j].y, sizeof(single), read);
          end;
          closefile(f);
          AssignFile(f,folder+'\'+sections.Strings[i]+'.x');
          reset(f,1);
          for j := 0 to len - 1 do
          begin
            blockread(f, cbuffsignal(s).points2d[j].x, sizeof(single), read);
          end;
          closefile(f);
          signals.add(s);
        end
        else
        begin
          s:=cbuffsignal.create;
          s.name:=sections.Strings[i];
          s.ffreqX:=freq;
          AssignFile(f,fname);
          reset(f,1);
          len:=trunc(FileSize(f)/4);
          s.capacity:=len;
          blockread(f,cbuffsignal(s).points1d[0],FileSize(f),len);
          signals.add(s);
          closefile(f);
        end;
        result:=true;
      end;
    end;
  end;
end;

end.
