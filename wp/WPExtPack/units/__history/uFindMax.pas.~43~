// модуль реализует оператор поиска максимумов в заданых полосах
unit uFindMax;

{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers.
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}

interface
uses
  ComObj, ActiveX, ExtOperSample_TLB, Winpos_ole_TLB, StdVcl, widestrutils,
  sysutils, ComServ, uFindMaxForm;

const
  // ctrl+shift+G
  Class_ExtOperAmpFind: TGUID = '{D3C1A26C-C4BD-44A5-A9D3-E889B3C52533}';

type

  ExtOperAmpFind = IWPExtOper;


  TExtOperAmpFind = class(TAutoObject, IWPExtOper)
  private
    frm:tFindMaxForm;
  protected
    procedure Exec(const psrc1, psrc2: IDispatch; out pdst1, pdst2: IDispatch); safecall;
    procedure GetError(out pnerrcode: Integer; out perrstr: WideString); safecall;
    procedure GetPropStr(out pstr: WideString); safecall;
    procedure OnApply; safecall;
    procedure OnClose; safecall;
    procedure OnSetup(hwndparent: Integer; out phwnd: Integer); safecall;
    procedure SetPropStr(const str: WideString); safecall;
  end;

// *********************************************************************//
// The Class CoExtOperPower provides a Create and CreateRemote method to
// create instances of the default interface IWPExtOper exposed by
// the CoClass ExtOperPower. The functions are intended to be used by
// clients wishing to automate the CoClass objects exposed by the
// server of this typelibrary.
// *********************************************************************//
  CoTExtOperAmpFind = class
    class function Create: IWPExtOper;
    class function CreateRemote(const MachineName: string): IWPExtOper;
  end;

implementation

class function CoTExtOperAmpFind.Create: IWPExtOper;
begin
  Result := CreateComObject(Class_ExtOperAmpFind) as IWPExtOper;
end;

class function CoTExtOperAmpFind.CreateRemote(const MachineName: string): IWPExtOper;
begin
  Result := CreateRemoteComObject(MachineName, Class_ExtOperAmpFind) as IWPExtOper;
end;

procedure TExtOperAmpFind.Exec(const psrc1, psrc2: IDispatch; out pdst1, pdst2: IDispatch);
var src, dst : IWPSignal;
    sz : Integer;
    i, j, k, szbuf, szret : Integer;
    vysrc, vydst : OleVariant; vx : OleVariant;
    y : Double;
begin
  {src:= psrc1 as IWPSignal;
  sz:= src.size;
  dst:= src.Clone(0,0) as IWPSignal;

  //if sz<MAXBUFBUFSIZE then szbuf:= sz else szbuf:= MAXBUFBUFSIZE;
  //vysrc:= VarArrayCreate([0, szbuf-1], varDouble);
  //vydst:= VarArrayCreate([0, szbuf-1], varDouble);

  k:= 0;
  j:= 0;
  src.GetArray(0, szret, vysrc, vx, TRUE);
  for i:= 0 to sz - 1 do
  begin
     y:= vysrc[j];

     // Это только пример, поэтому не будем рассмативать вариант получения
     // мнимого результата при дробном dblPow и отрицательных значениях
     y:= exp( dblPow * ln(abs(y)) );
     if odd(Trunc(dblPow)) and (vysrc[j]<0) then y:=-y;

     vydst[j]:= y;
     Inc(j);

     if (j=szbuf) or (i=(sz-1)) then // буферизация чтения и записи значений
     begin
        dst.SetArray(k*szbuf, szret, vydst, vx, FALSE);
        if i<(sz-1) then
           src.GetArray(k*szbuf, szret, vysrc, vx, TRUE);
        Inc(k);
        j:= 0;
     end;
  end;

  VarClear(vysrc); VarClear(vydst);
  pdst1:= dst;}
end;

procedure TExtOperAmpFind.GetError(out pnerrcode: Integer; out perrstr: WideString);
begin
  pnerrcode:= 0;
end;

procedure TExtOperAmpFind.GetPropStr(out pstr: WideString);
begin
   pstr:= 'GetPropStr';//+ WideStringReplace( , DecimalSeparator, '.', [rfReplaceAll] );
end;

procedure TExtOperAmpFind.OnApply;
var Code  : Integer;
begin
   //Val(frm.ValPower.Text, dblPow, Code);
end;

procedure TExtOperAmpFind.OnClose;
begin
  frm.Destroy;
end;

procedure TExtOperAmpFind.OnSetup(hwndparent: Integer; out phwnd: Integer);
begin
   frm:= TFindMaxForm.CreateParented( hwndparent );
   frm.Show;
   phwnd:= frm.Handle;
   //frm.ValPower.SetSelText(FloatToStr(dblPow));
end;

procedure TExtOperAmpFind.SetPropStr(const str: WideString);
var position  : Integer;
var stra : AnsiString;
begin
  stra:= str;
  position:= pos('pow=', stra); Inc(position, 4);
  //if position <> 0 then
  //  dblPow:= StrToFloat( StringReplace( copy(stra, position, length(stra) - position + 1), '.', DecimalSeparator, [rfReplaceAll] ) );
end;

initialization
  TAutoObjectFactory.Create(ComServer, TExtOperAmpFind, Class_ExtOperAmpFind,
    ciSingleInstance, tmApartment);
end.
